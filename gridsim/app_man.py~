#application manager

import numpy
from import_manager import import_manager
import_manager_local = import_manager()
if import_manager_local.import_trace:
	from SimPy.SimulationTrace import *
else:
	from SimPy.Simulation import *


class TaskState :
	stalled , ready , running, completed = range(4)

class task_microkernel_new(Process):
	def __init__(self, name, exectime, parent_task):
		Process.__init__(self, name=name)
		self.exectime = exectime
		self.parent_task = parent_task
		self.start_event = SimEvent(name=name+" task microkernel start")

	def start_on_node(self, noderef):
		self.noderef = noderef
		self.actualresource = noderef.actualresource
		self.start_event.signal()
	
	def go(self):
#		print "task microkernel", self.name, "activating at", now()
		yield waitevent, self, self.start_event
#		print "task microkernel", self.name, "starting at", now()
		self.parent_task.set_exec_params_on_start()
		yield request, self, self.actualresource
#		print "task microkernel", self.name, "got resource at", now()
		yield hold, self, self.exectime
#		print "task microkernel", self.name, "held until", now()
		yield release, self, self.actualresource
#		print "task microkernel", self.name, "finished at", now()				
		self.parent_task.set_exec_params_on_finish()
		self.parent_task.parent_job.task_finish_event.signal()
		self.noderef.task_finished_event.signal()		
#		print "task microkernel", self.name, "finished at", now()		
		
	




class task(object):
	
	class dep_man(object):
		def __init__(self, dependencies, dependents):
			self.dependencies = dependencies
			self.dependents = dependents
			self.dependency_names = [t.taskid for t in self.dependencies]
			self.dependency_finished_array = numpy.array([False for t in self.dependencies])
			self.dependencies_satisfied_cached = False
			
		def dependency_completed(self, task):
			ind = self.dependency_names.index(task.taskid)
			self.dependency_finished_array[ind] = True
		
		def dependencies_satisfied(self):
			if self.dependencies_satisfied_cached:
				return True
			else:	
				result = numpy.all(self.dependency_finished_array)
				self.dependencies_satisfied_cached = result
				return result
	
	class state_man(object):
		def __init__(self, parent_task):
			self.parent_task = parent_task
			if parent_task.dependency_manager.dependencies == []:
				self.state = TaskState.ready
			else:
				self.state = TaskState.stalled
		
		def when_all_dependencies_completed(self):
			#print "all deps completed for", self.parent_task.taskid, "at", now()
			if self.state == TaskState.stalled:
				self.state = TaskState.ready
			else:
				print "error, trying to transition to ready from ", self.state
				exit()
		
		def when_task_starts_running(self):
			if self.state == TaskState.ready:
				self.state = TaskState.running
			else:
				print "error, trying to transition to running from ", self.state
				exit()
		
		def when_task_completed(self):
			if self.state == TaskState.running:
				self.state = TaskState.completed
			else:
				print "error, trying to transition to completed from ", self.state
				exit()

	def __init__(self,taskid, exectime, parent_job, requirements_kind, corecount, simulation_parameters):
		self.taskid = taskid
		self.parent_job = parent_job
		self.exectime = exectime
		self.requirements_kind = requirements_kind
		self.debugging_on = simulation_parameters["debugging_on"]
		self.corecount = corecount
		
		self.completed = False
		self.starttime = None
		self.finishtime = None
		self.execnodes = None
		
		self.kernels = [task_microkernel_new(taskid+"_kernel_"+str(i), exectime, self) for i in range(corecount)]
		self.activate_kernels(self.kernels)
		self.dependency_manager = None
		self.state_manager = None
		self.dependencies_set = False
		self.assigned = False
		
	def activate_kernels(self, kernels):
		for k in kernels:
			activate(k, k.go(), at=now())

	def set_dependencies(self, dependency_list, dependents_list):
		#print "setting deps/dependents for", self.taskid, [t.taskid for t in dependency_list], [t.taskid for t in dependents_list]
		self.dependency_manager = self.dep_man(dependency_list, dependents_list)
		self.state_manager = self.state_man(self)
		self.dependencies_set = True

	def expected_finish_time(self):
		if self.state_manager.state == TaskState.running:
			return self.starttime + self.exectime
		else:
			print "error, asking for expected finish time for a task that is not running"
			exit()

	def set_exec_params_on_start(self):
		self.starttime = now()
		self.state_manager.when_task_starts_running()
	
	def set_exec_params_on_finish(self):
		self.finishtime = now()
		self.state_manager.when_task_completed()
		self.completed = True
		for d in self.dependency_manager.dependents:
			d.dependency_completed(self)

	def dependency_completed(self, task):
		#print 'dependency_completed for task', self.taskid, 'by', task.taskid
		self.dependency_manager.dependency_completed(task)
		if self.dependency_manager.dependencies_satisfied():
			self.state_manager.when_all_dependencies_completed()
			print "deps completed for", self.taskid, "at", now()
	
	def dependencies_satisfied(self):
		return self.dependency_manager.dependencies_satisfied()

	def assign(self, noderefs):
		if self.debugging_on:
			print "task", self.taskid, "starting at", now(), "on", [n.name for n in noderefs]
			self.__assignment_checks(noderefs)
		self.execnodes = noderefs		
		for kid in range(len(self.kernels)):
			self.kernels[kid].start_on_node(noderefs[kid])
		self.assigned = True
			

	def __assignment_checks(self, noderefs):
		if self.assigned:
			print "Fatal Error, task has already been assigned but assign has been called again"
			exit()
		if len(noderefs) != self.corecount:
			print "error, task asssigned to wrong number of cores", self.taskid, self.corecount, len(noderefs)
			exit()
		if self.parent_job.activation_time > now():
			print "error, trying to activate task before parent job has even been submitted!"
			exit()
	
	# ---- task getters
	
	def get_requirements_kind(self):
		return self.requirements_kind
	
	def get_core_count(self):
		return len(self.kernels)
	
	def get_dependencies(self):
		return self.dependency_manager.dependencies
		
	def get_dependents(self):
		return self.dependency_manager.dependents
	
	def get_execution_time(self):
		return self.exectime
		
		







class job(Process):
	def __init__(self,name,simulation_parameters):
		Process.__init__(self, name=name)
		self.jobid = name
		self.debugging_on = simulation_parameters["debugging_on"]

		self.submit_time = None
		self.completion_time = None
		self.activation_time = None
		self.submit_node = None
		self.completed = False
		self.tasklist = None
		self.task_requirement_kinds = None

		self.task_finish_event = SimEvent(name=name+" task just finished")
	
	def set_tasklist(self, tasklist):
		self.tasklist = tasklist
		self.task_requirement_kinds = set([t.get_requirements_kind() for t in self.tasklist])
	
	def set_submission_time(self, submit_time):
		self.submit_time = submit_time
	
	def __preflight_checks__(self):
		if self.tasklist == []:
			print "fatal error: job is being set to go without having a task list defined!!"
			exit()
		if (self.submit_time is None) or (self.submit_time < 0):
			print "error: job is being set to go without having a submission time defined"
			exit()

	def go(self):
		if self.debugging_on:
			self.__preflight_checks__()
			#print "job", self.name, "starting at", now()
		#don't really wake up until it is time
		self.activation_time = now()
		if now() < self.submit_time:
			#print "submitted at ", now()
			yield hold, self, self.submit_time - now()
			#print "activated at ", now()
				

		while not self.completed:
			
			self.completed = all(numpy.array([t.completed for t in self.tasklist]))
			yield waitevent, self, self.task_finish_event
			#self.exec_router_home.router_trigger_event.signal() #!! may need this here 
		
		self.completion_time = now()
		
	
	#getters 
	def completion_time(self):
		if self.completed:
			return self.completion_time
		else:
			print "warning: asking for completion time before completion"
			return -1
	
		
	def architectures_required(self):
		return self.task_requirement_kinds
	
	def sum_of_task_exectimes(self):
		return numpy.sum(numpy.array([t.exectime for t in self.tasklist]))
	
	def get_submit_time(self):
		if self.submit_time is not None:
			return self.submit_time
		else:
			print "requesting submit time before it has been specified"
			exit()

	#printing for debugging
	def print_job(self):
		print "\n\n --- \n\n"
		print 'name: ', self.jobid
		for t in self.tasklist:
			print 'task ', t.taskid
			deplist = [tk.taskid for tk in t.dependencies]
			print 'depends on ', deplist, 'and runs for ', t.exectime
		print "\n\n"
	



class application_manager(Process):
	def __init__(self, app_man_id, platform_manager, simulation_parameters):
		Process.__init__(self,name=app_man_id)
		self.debugging_on = simulation_parameters["debugging_on"]
		self.platform_manager = platform_manager
		self.joblist = self.read_workload_from_file(simulation_parameters)
		self.set_job_start_times(self.joblist, simulation_parameters)
		
	
	def __start_times_checks__(self, sim_params):
		if len(self.joblist) < 1:
			print "trying to set job start times, but no jobs in joblist. maybe file hasn't been read yet"
			exit()
		
		if sim_params["staggered_release"]:
			if "target_utilisation" not in sim_params.keys():
				print "target_utilisation_percent not specified yet staggered release requested"
				exit()
			elif sim_params["target_utilisation"] < 1:
				print "target_utilisation_percent set too low to be useful", sim_params["target_utilisation"]
				exit()
			elif sim_params["target_utilisation"] > 999:
				print "target utilisation percent may be too high to be useful."
				print "to release jobs simultaneously, specify staggered_release to False"
				exit()
	
	def __file_read_checks__(self, sim_params):
		if "workload_filename" not in sim_params.keys():
			print "workload filename not specified"
			exit()
		
		if sim_params["workload_filename"] == "":
			print "no input filename specified"
			exit()
		
		import os.path		
		if not os.path.isfile(sim_params["workload_filename"]):
			print "filename specified cannot be found"
			exit()
	
	def __read_in_workload_checks__(self, joblist):
		if joblist == []:
			print "joblist read is empty"
			exit()
		invalidtasklistlens = [len(j.tasklist) < 1 for j in joblist]
		if True in invalidtasklistlens:
			print "at least one job has no tasks in the read file", invalidatasklistlens
			exit()
			


	def set_job_start_times(self, joblist, sim_params):
		if self.debugging_on:
			self.__start_times_checks__(sim_params)
		
		staggered_release = sim_params['staggered_release']
		utilisation = sim_params['target_utilisation']
		num_procs = self.platform_manager.get_platform_core_count()
		
				
		if not staggered_release:
			for j in joblist:
				j.set_submission_time(0)
		else:
			new_start_time = 0
			prev_job_exec_sum = joblist[0].sum_of_task_exectimes()
			for j in joblist:
				j.set_submission_time(new_start_time)
				new_start_time += int(
									  (float(prev_job_exec_sum)/float(num_procs))
									  /
									  (float(utilisation)/float(100))
									 )
				prev_job_exec_sum = j.sum_of_task_exectimes()
	
	def make_tasklist(self, task_string_list, parent_job, sim_params):
		new_tasklist = []
		new_dependencies = []
		
		for nt in task_string_list:
			newtask = task(nt[0], int(nt[1]), parent_job, sim_params["task_unspecified_kind"], 1, sim_params)
			new_tasklist.append(newtask)
			new_dependencies.append(nt[2])
		
		#print [t.taskid for t in new_tasklist]
		#print new_dependencies
		for source_task_id in range(len(new_tasklist)):
			dependencies = []
			dependents   = []
			for destination_task_id in range(len(new_tasklist)):
				if destination_task_id != source_task_id:
					if new_tasklist[destination_task_id].taskid in new_dependencies[source_task_id]:
						dependencies.append(new_tasklist[destination_task_id])
					if new_tasklist[source_task_id].taskid in new_dependencies[destination_task_id]:
						dependents.append(new_tasklist[destination_task_id])
			
			#print dependencies, dependents
			new_tasklist[source_task_id].set_dependencies(dependencies, dependents)
		
		return new_tasklist


		
	def read_workload_from_file(self, sim_params):
		if self.debugging_on:
			self.__file_read_checks__(sim_params)
		
		joblist = []
		jobnames = []
		taskgroups = []
		curr_task_group = []
		tasklist = []
		
		jobcount = 0
		
		workloadinfile = open(sim_params["workload_filename"], 'r')
		
		for line in workloadinfile:
			if line != "":
				ln = line.split(" ")
				
				if ln[0] == "Job":
					jobcount += 1
					if jobcount > 1:
						curr_job.set_tasklist(self.make_tasklist(curr_task_group, curr_job, sim_params))
						curr_task_group = []
						joblist.append(curr_job)
					curr_job = job(ln[1].rstrip(),sim_params)
					
				elif ln[0] == "Task":
					tname = ln[1]
					texec = ln[2]					
					tdepsstr = ln[3].rstrip()
					if tdepsstr == "":
						newtaskdepids = []
					else:
						newtaskdepids = tdepsstr.split(',')
					curr_task_group.append([tname, texec, newtaskdepids])
		
		curr_job.set_tasklist(self.make_tasklist(curr_task_group, curr_job, sim_params))
		joblist.append(curr_job)
		workloadinfile.close()
		if joblist == []:
			print "error: joblist empty"
			exit()
		#print [j.name for j in joblist]
		return joblist


	def go(self):
		#print "application manager commence execution"
		for j in self.joblist:
			activate(j, j.go())
			yield hold, self, j.get_submit_time() - now()
			self.platform_manager.toprouter.assign_job(j)
			self.platform_manager.toprouter.update.signal()




